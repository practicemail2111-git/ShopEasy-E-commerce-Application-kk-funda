pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "practicemail2111/mongospring:latest"
    }

    stages {

        // üßæ Checkout Source Code
        stage('Checkout') {
            steps {
                git(
                    branch: 'main',
                    credentialsId: '33e5e605-33c2-45d2-8c7d-4a94a80eb1ef',
                    url: 'https://github.com/practicemail2111-git/ShopEasy-E-commerce-Application-kk-funda.git'
                )
            }
        }

        // üîç File System Trivy Scan
        stage('Trivy Scan') {
            steps {
                script {
                    def status = sh(script: 'trivy fs --format table -o trivy-scan-report.html .', returnStatus: true)
                    if (status != 0) {
                        error "‚ùå Trivy scan failed with exit code ${status}"
                    } else {
                        echo "‚úÖ Trivy scan completed successfully."
                    }
                }
            }
        }

        // üê≥ Build Docker Image
        stage('Build Docker Image') {
            steps {
                dir('backend') { // üëà ensure Dockerfile is inside backend/
                    script {
                        withDockerRegistry(credentialsId: 'dckr_pat_OKaZdbdCmkWUSNpQX4deOwz6eKw') {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                        }
                    }
                }
            }
        }

        // üöÄ Push Docker Image to Docker Hub
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dckr_pat_OKaZdbdCmkWUSNpQX4deOwz6eKw') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        // üìä Optional: SonarQube Code Quality Check (skip if not configured)
        stage('SonarQube Analysis') {
            when {
                expression { return fileExists('backend') }
            }
            steps {
                dir('backend') {
                    withSonarQubeEnv('sonar') {
                        sh '''
                            echo "Running SonarQube scan (if applicable)..."
                            # Example command if Maven or Sonar scanner exists:
                            # sonar-scanner -Dsonar.projectKey=springboot-app -Dsonar.sources=.
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ CI/CD pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs above."
        }
    }
}
